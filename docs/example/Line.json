{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg } from 'layercake';\n  import points from './data/points.csv';\n\n  import Line from './components/Line.svelte';\n  import Area from './components/Area.svelte';\n  import AxisX from './components/AxisX.svelte';\n  import AxisY from './components/AxisY.svelte';\n\n  points.forEach(row => {\n    row.myY = +row.myY;\n  });\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ right: 10, bottom: 20, left: 25 }}\n    x={'myX'}\n    y={d => d.myY}\n    yDomain={[0, null]}\n    data={points}\n  >\n    <Svg>\n      <AxisX/>\n      <AxisY\n        ticks={4}\n      />\n      <Line/>\n      <Area/>\n    </Svg>\n  </LayerCake>\n</div>"},"dek":"A simple line and area chart.\n","components":[{"title":"./components/Line.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet } = getContext('LayerCake');\n\n  export let stroke = '#ab00d6';\n\n  $: path = 'M' + $data\n    .map(d => {\n      return $xGet(d) + ',' + $yGet(d);\n    })\n    .join('L');\n</script>\n\n<path class='path-line' d='{path}' {stroke}></path>\n\n<style>\n  .path-line {\n    fill: none;\n    stroke-linejoin: round;\n    stroke-linecap: round;\n    stroke-width: 2;\n  }\n</style>"},{"title":"./components/Area.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, xScale, yScale, extents } = getContext('LayerCake');\n\n  $: path = 'M' + $data\n    .map(d => {\n      return $xGet(d) + ',' + $yGet(d);\n    })\n    .join('L');\n\n  let area;\n\n  $: {\n    const yRange = $yScale.range();\n    area = path + (\n      'L' + $xScale($extents.x[1]) + ',' + yRange[0] +\n      'L' + $xScale($extents.x[0]) + ',' + yRange[0] +\n      'Z'\n    );\n  }\n</script>\n\n<path class='path-area' d='{area}'></path>\n\n<style>\n  .path-area {\n    fill: #ab00d610;\n  }\n</style>"},{"title":"./components/AxisX.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yScale } = getContext('LayerCake');\n\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks = undefined;\n  export let tickX = '0';\n  export let tickY = '16';\n  export let tickDx = '0';\n  export let tickDy = '0';\n\n  let tickVals;\n\n  $: if (typeof $xScale.bandwidth === 'function') {\n    tickVals = $xScale.domain();\n  } else if (Array.isArray(ticks)) {\n    tickVals = ticks;\n  } else {\n    tickVals = $xScale.ticks(ticks);\n  }\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n<g class='axis x-axis'>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n      {#if gridlines !== false}\n        <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text\n        x={typeof tickX === 'function' ? tickX($xScale) : tickX}\n        y={typeof tickY === 'function' ? tickY($yScale) : tickY}\n        dx='{typeof tickDx === 'function' ? tickDx($xScale) : typeof $xScale.bandwidth === 'function' ? ($xScale.bandwidth() / 2) : tickDx}'\n        dy='{typeof tickDy === 'function' ? tickDy($yScale) : tickDy}'\n        text-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n  {#if baseline === true}\n    <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>"},{"title":"./components/AxisY.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, xScale, yScale } = getContext('LayerCake');\n\n  export let ticks = undefined;\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let tickX = '0';\n  export let tickY = '';\n  export let tickDx = undefined;\n  export let tickDy = undefined;\n  export let textAnchor = typeof $yScale.bandwidth === 'function'  ? 'end' : 'start';\n\n  let tickVals;\n\n  $: if (typeof $yScale.bandwidth === 'function') {\n    tickVals = $yScale.domain();\n  } else if (Array.isArray(ticks)) {\n    tickVals = ticks;\n  } else {\n    tickVals = $yScale.ticks(ticks);\n  }\n</script>\n\n<g class='axis y-axis' transform='translate(-{$padding.left}, 0)'>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{tick}' transform='translate({$xRange[0]}, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line\n          x2='100%'\n          y1=\"{typeof tickY === 'function' ? tickY($yScale) : typeof tickY === 'undefined' && typeof $yScale.bandwidth === 'function' ? ($yScale.bandwidth() / 2) : tickY || '-4'}\"\n          y2=\"{typeof tickY === 'function' ? tickY($yScale) : typeof tickY === 'undefined' && typeof $yScale.bandwidth === 'function' ? ($yScale.bandwidth() / 2) : tickY || '-4'}\"\n        ></line>\n      {/if}\n      <text\n        x='{typeof tickX === 'function' ? tickX($xScale) : typeof tickX === 'undefined' && typeof $yScale.bandwidth === 'function' ? '-5' : tickX || '0'}'\n        y='{typeof tickY === 'function' ? tickY($yScale) : typeof tickY === 'undefined' && typeof $yScale.bandwidth === 'function' ? (4 + ($yScale.bandwidth() / 2)) : tickY || '-4'}'\n        dx={typeof tickDx === 'function' ? tickDx($xScale) : tickDx}\n        dy={typeof tickDy === 'function' ? tickDy($yScale) : tickDy}\n        style=\"text-anchor:{textAnchor};\"\n      >{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/points.csv","contents":"myX,myY\n1979,7.19\n1980,7.83\n1981,7.24\n1982,7.44\n1983,7.51\n1984,7.1\n1985,6.91\n1986,7.53\n1987,7.47\n1988,7.48\n1989,7.03\n1990,6.23\n1991,6.54\n1992,7.54\n1993,6.5\n1994,7.18\n1995,6.12\n1996,7.87\n1997,6.73\n1998,6.55\n1999,6.23\n2000,6.31\n2001,6.74\n2002,5.95\n2003,6.13\n2004,6.04\n2005,5.56\n2006,5.91\n2007,4.29\n2008,4.72\n2009,5.38\n2010,4.92\n2011,4.61\n2012,3.62\n2013,5.35\n2014,5.28\n2015,4.63\n2016,4.72"}]}