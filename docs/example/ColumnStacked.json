{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg, flatten, uniques } from 'layercake';\n  import { stack } from 'd3-shape';\n  import { scaleBand } from 'd3-scale';\n\n  import fruit from './data/fruitOrdinal.csv';\n  import ColumnStacked from './components/ColumnStacked.svelte';\n  import AxisX from './components/AxisX.svelte';\n  import AxisY from './components/AxisY.svelte';\n\n  const seriesNames = Object.keys(fruit[0]).filter(d => d !== 'year');\n\n  fruit.forEach(row => {\n    seriesNames.forEach(name => {\n      row[name] = +row[name];\n    });\n  });\n\n  const stackData = stack()\n    .keys(seriesNames);\n\n  const series = stackData(fruit);\n\n  function formatTickY (d) {\n    if (d > 999) {\n      return Math.round(d / 1000) + 'k';\n    }\n    return d;\n  }\n\n  const seriesColors = ['#00e047', '#7ceb68', '#b7f486', '#ecfda5'];\n\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n       padding={{ top: 0, right: 0, bottom: 20, left: 20 }}\n       x={d => d.data.year}\n       y={[0, 1]}\n       xScale={scaleBand().paddingInner([0.02]).round(true)}\n       xDomain={uniques(fruit, 'year')}\n       flatData={flatten(series)}\n       data={series}\n       custom={{ seriesNames }}\n  >\n    <Svg>\n      <AxisX\n        gridlines={false}\n      />\n      <AxisY\n        ticks={4}\n        gridlines={false}\n        formatTick={formatTickY}\n      />\n      <ColumnStacked\n        {seriesColors}\n      />\n    </Svg>\n  </LayerCake>\n\n</div>"},"dek":"","components":[{"title":"./components/ColumnStacked.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n  import { scaleOrdinal } from 'd3-scale';\n\n  export let seriesColors;\n\n  const { data, xGet, yGet, xScale, custom } = getContext('LayerCake');\n\n  $: columnHeight = d => {\n    const yVals = $yGet(d);\n    return yVals[0] - yVals[1];\n  };\n\n  const colorScale = scaleOrdinal()\n    .domain($custom.seriesNames)\n    .range(seriesColors);\n</script>\n\n<g class=\"column-group\">\n  {#each $data as series, i}\n    {#each series as d}\n      <rect\n        class='group-rect'\n        data-id=\"{i}\"\n        x=\"{$xGet(d)}\"\n        y=\"{$yGet(d)[1]}\"\n        width={$xScale.bandwidth()}\n        height=\"{columnHeight(d)}\"\n        fill={colorScale(series.key)}\n      ></rect>\n    {/each}\n  {/each}\n</g>"},{"title":"./components/AxisX.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yScale } = getContext('LayerCake');\n\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks = undefined;\n  export let tickX = '0';\n  export let tickY = '16';\n  export let tickDx = '0';\n  export let tickDy = '0';\n\n  let tickVals;\n\n  $: if (typeof $xScale.bandwidth === 'function') {\n    tickVals = $xScale.domain();\n  } else if (Array.isArray(ticks)) {\n    tickVals = ticks;\n  } else {\n    tickVals = $xScale.ticks(ticks);\n  }\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n<g class='axis x-axis'>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n      {#if gridlines !== false}\n        <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text\n        x={typeof tickX === 'function' ? tickX($xScale) : tickX}\n        y={typeof tickY === 'function' ? tickY($yScale) : tickY}\n        dx='{typeof tickDx === 'function' ? tickDx($xScale) : typeof $xScale.bandwidth === 'function' ? ($xScale.bandwidth() / 2) : tickDx}'\n        dy='{typeof tickDy === 'function' ? tickDy($yScale) : tickDy}'\n        text-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n  {#if baseline === true}\n    <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>"},{"title":"./components/AxisY.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, xScale, yScale } = getContext('LayerCake');\n\n  export let ticks = undefined;\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let tickX = '0';\n  export let tickY = '';\n  export let tickDx = undefined;\n  export let tickDy = undefined;\n  export let textAnchor = typeof $yScale.bandwidth === 'function'  ? 'end' : 'start';\n\n  let tickVals;\n\n  $: if (typeof $yScale.bandwidth === 'function') {\n    tickVals = $yScale.domain();\n  } else if (Array.isArray(ticks)) {\n    tickVals = ticks;\n  } else {\n    tickVals = $yScale.ticks(ticks);\n  }\n</script>\n\n<g class='axis y-axis' transform='translate(-{$padding.left}, 0)'>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{tick}' transform='translate({$xRange[0]}, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line\n          x2='100%'\n          y1=\"{typeof tickY === 'function' ? tickY($yScale) : typeof tickY === 'undefined' && typeof $yScale.bandwidth === 'function' ? ($yScale.bandwidth() / 2) : tickY || '-4'}\"\n          y2=\"{typeof tickY === 'function' ? tickY($yScale) : typeof tickY === 'undefined' && typeof $yScale.bandwidth === 'function' ? ($yScale.bandwidth() / 2) : tickY || '-4'}\"\n        ></line>\n      {/if}\n      <text\n        x='{typeof tickX === 'function' ? tickX($xScale) : typeof tickX === 'undefined' && typeof $yScale.bandwidth === 'function' ? '-5' : tickX || '0'}'\n        y='{typeof tickY === 'function' ? tickY($yScale) : typeof tickY === 'undefined' && typeof $yScale.bandwidth === 'function' ? (4 + ($yScale.bandwidth() / 2)) : tickY || '-4'}'\n        dx={typeof tickDx === 'function' ? tickDx($xScale) : tickDx}\n        dy={typeof tickDy === 'function' ? tickDy($yScale) : tickDy}\n        style=\"text-anchor:{textAnchor};\"\n      >{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/fruitOrdinal.csv","contents":"year,apples,bananas,cherries,dates\n2019,3840,1920,960,400\n2018,1600,1440,960,400\n2017,820,1000,640,400\n2016,820,560,720,400"}]}