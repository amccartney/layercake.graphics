{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg, flatten } from 'layercake';\n  import { stack } from 'd3-shape';\n  import { scaleBand } from 'd3-scale';\n\n  import fruit from './data/fruitOrdinal.csv';\n  import BarStacked from './components/BarStacked.svelte';\n  import AxisX from './components/AxisX.svelte';\n  import AxisYScaleBand from './components/AxisYScaleBand.svelte';\n\n  const seriesNames = Object.keys(fruit[0]).filter(d => d !== 'year');\n\n  fruit.forEach(row => {\n    seriesNames.forEach(name => {\n      row[name] = +row[name];\n    });\n  });\n\n  const stackData = stack()\n    .keys(seriesNames);\n\n  const series = stackData(fruit);\n\n  function formatTickX (d) {\n    if (d > 999) {\n      return Math.round(d / 1000) + 'k';\n    }\n    return d;\n  }\n\n  const seriesColors = ['#00bbff', '#8bcef6', '#c4e2ed', '#f7f6e3'];\n</script>\n\n<style>\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ top: 0, bottom: 20, left: 30 }}\n    y={d => d.data.year}\n    x={[0, 1]}\n    yScale={scaleBand().paddingInner([0.05]).round(true)}\n    yDomain={['2016', '2017', '2018', '2019']}\n    flatData={flatten(series)}\n    data={series}\n    custom={{ seriesNames }}\n  >\n    <Svg>\n      <AxisX\n        baseline={true}\n        snapTicks={true}\n        formatTick={formatTickX}\n      />\n      <AxisYScaleBand\n        gridlines={false}\n      />\n      <BarStacked\n        {seriesColors}\n      />\n    </Svg>\n  </LayerCake>\n\n</div>"},"dek":"","components":[{"title":"./components/BarStacked.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n  import { scaleOrdinal } from 'd3-scale';\n\n  export let seriesColors;\n\n  const { data, xGet, yGet, yScale, custom } = getContext('LayerCake');\n\n  $: columnWidth = d => {\n    const xVals = $xGet(d);\n    return xVals[1] - xVals[0];\n  };\n\n  $: colorScale = scaleOrdinal()\n    .domain($custom.seriesNames)\n    .range(seriesColors);\n\n</script>\n\n<g class=\"bar-group\">\n  {#each $data as series}\n    {#each series as d, i}\n      <rect\n        class='group-rect'\n        data-id=\"{i}\"\n        x=\"{$xGet(d)[0]}\"\n        y=\"{$yGet(d)}\"\n        height={$yScale.bandwidth()}\n        width=\"{columnWidth(d)}\"\n        fill={colorScale(series.key)}\n      ></rect>\n    {/each}\n  {/each}\n</g>"},{"title":"./components/AxisX.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yScale } = getContext('LayerCake');\n\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks = undefined;\n  export let tickX = '0';\n  export let tickY = '16';\n  export let tickDx = '0';\n  export let tickDy = '0';\n\n  let tickVals;\n\n  $: if (typeof $xScale.bandwidth === 'function') {\n    tickVals = $xScale.domain();\n  } else if (Array.isArray(ticks)) {\n    tickVals = ticks;\n  } else {\n    tickVals = $xScale.ticks(ticks);\n  }\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n<g class='axis x-axis'>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n      {#if gridlines !== false}\n        <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text\n        x={typeof tickX === 'function' ? tickX($xScale) : tickX}\n        y={typeof tickY === 'function' ? tickY($yScale) : tickY}\n        dx='{typeof tickDx === 'function' ? tickDx($xScale) : typeof $xScale.bandwidth === 'function' ? ($xScale.bandwidth() / 2) : tickDx}'\n        dy='{typeof tickDy === 'function' ? tickDy($yScale) : tickDy}'\n        text-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n  {#if baseline === true}\n    <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>"},{"title":"./components/AxisYScaleBand.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { xScale, yScale, xRange } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let formatTick = d => d;\n\n  $: halfBandwidth = $yScale.bandwidth() / 2;\n</script>\n\n<g class='axis y-axis'>\n  {#each $yScale.domain() as tick}\n    <g class='tick tick-{tick}' transform='translate({$xRange[0]}, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line x2='100%' y1={halfBandwidth} y2={halfBandwidth}></line>\n      {/if}\n      <text y='{4 + halfBandwidth}' x=\"-5\">{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n\n  .y-axis .tick text {\n    text-anchor: end;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/fruitOrdinal.csv","contents":"year,apples,bananas,cherries,dates\n2019,3840,1920,960,400\n2018,1600,1440,960,400\n2017,820,1000,640,400\n2016,820,560,720,400"}]}